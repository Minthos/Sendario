

TODO:

I have to do a second traversal of the terrain tree after the procedural elevation pass
In the second traversal I should do a breadth-first traversal and set the neighbor values for each node

when all the neighbor values have been set I can check the rendered_at_level for a node's neighbors to find out if
I have to adjust a vertex position to avoid gaps in the terrain and also calculate corner normals by accessing neighbor's neighbors and averaging something together


improve terrain generation and rendering
 - caves, tunnels, underground structures
   a cave opening deletes one or more triangles from the terrain mesh and links to a cave mesh
   the cave mesh can have multiple openings
 - cache generated terrain to disk/database because the gpu can render a lot faster than we can procedurally generate
   a few million triangles
 - pass more per-vertex variables to the shader such as elevation, wetness, temperature, scorchedness, recently excavatedness
 - give low LOD versions of triangles a billboard facing the player with vegetation, rocks and buildings
 - billboard can be an upside down triangle sticking through the ground but a quad may be better, one more triangle
   but less area to rasterize
 - texture map for the billboard can have different versions of vegetation corresponding to wind strength and
   direction, choose which version in the vertex shader based on wind information attached to the vertex
 - regenerate the mesh when the player moves some distance from the origin of the current mesh
 - voronoi cells for continental plates, 
 - render an atmosphere and some clouds
 - fluid simulation of atmosphere (wind, temperature, moisture, pollution, nuclear fallout) at the same
   resolution as terrain tree, that way we can reuse the terrain tree's neighbor pointers and dynamic LOD
   (probably a lot more data than I want to store on the server for multiplayer, may have to axe it)
 - terrain can store moisture based on a fluid simulation of rivers and lakes and evaporation/melting rate based
   on atmospheric temperature and humidity
 - cities, towns, farms
   apartment/office blocks are tall textured boxes
   buildings can be procedurally generated from templates - different styles and materials for walls, roofs and shape
 - roads, railroads, docks and airfields
 - industry
   smelter refines ore (and pretty much any item that has metal in it)
   factory can build anything
   power plants: solar and nuclear


implement gravity and basic collision with terrain


add more cool shit


----



physics engine: record and replay
every second: snapshot of the physics state
every tick: only the variables that changed



representing the player's UI state
rts, controlling a vehicle, controlling a character


representing players, npcs
"owner" class, can own many units and vehicles
"unit" class: player characters, NPCs, vehicles


representing the world, its resources and objects not owned by anyone in particular



representing the market, contracts, communications, politics, factions, fleets/squads

need a simple way to flag owners as friends or foes of each other for basic combat functionality

I want to implement some guns (fixed angle, turret, point defense) and a homing missile to have at least
some basic combat functionality.



shadows

we can cast a few shadow rays from the z buffer at a low resolution as a first pass
if 4 points in a square have the same value (shaded or lit) fill in the area between them with the same value
optionally cast an extra ray for points with wildly different z-value than its neighbors
for the remaining points, cast additional rays to find the edge
if the ray to the obscuring object is long relative to the size and position of the light source,
stop at a low resolution and blur the edge. if it's short, trace the edge at a high resolution
finally fill in the areas on both sides of the edge




collisions



