TODO:

1. Identify which nodes of the terrain will be rendered at a higher LOD than their neighboring nodes
2. Ignore the real elevation for those nodes, instead use the average of the corner nodes that created the edge node
3. This seems like a two-pass algorithm


1. Generate some terrain
 - voronoi cellular noise tectonic plates and random noise heightmaps to begin with?

2. Render some terrain
 - generate a mesh centered on the player with max lod within a reasonable distance and reduced lod further out
 - don't worry about tiling and shit for now, just make one big mesh with progressive LOD
 - regenerate the mesh when the player moves some distance from the origin of the current mesh

3. Implement gravity and basic collision with terrain


?. add more cool shit


----



physics engine: record and replay
every second: snapshot of the physics state
every tick: only the variables that changed



representing the player's UI state
rts, controlling a vehicle, controlling a character


representing players, npcs
"owner" class, can own many units and vehicles
"unit" class: player characters, NPCs, vehicles


representing the world, its resources and objects not owned by anyone in particular



representing the market, contracts, communications, politics, factions, fleets/squads

need a simple way to flag owners as friends or foes of each other for basic combat functionality

I want to implement some guns (fixed angle, turret, point defense) and a homing missile to have at least
some basic combat functionality.



shadows

we can cast a few shadow rays from the z buffer at a low resolution as a first pass
if 4 points in a square have the same value (shaded or lit) fill in the area between them with the same value
optionally cast an extra ray for points with wildly different z-value than its neighbors
for the remaining points, cast additional rays to find the edge
if the ray to the obscuring object is long relative to the size and position of the light source,
stop at a low resolution and blur the edge. if it's short, trace the edge at a high resolution
finally fill in the areas on both sides of the edge




collisions



