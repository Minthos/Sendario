
TODO:
color tiles beyond vegetation LOD according to estimated vegetation so the vegetation doesn't abruptly cut off
physics
gameplay (guns? vehicles? resources? crafting?)


LATER:
positioning celestials relative to each other (galactic center -> star -> planet -> moon)
universally unambiguous coordinate system (celestial-> zone-> pos)
rts view with camera panning with keyboard
fluid simulation
character creation
speedtree for better trees


DONE:
fps wasd movement
re-center the player on a new LOD zone periodically
clamp to ground


---

I have to do a second traversal of the terrain tree after the procedural elevation pass
In the second traversal I should do a breadth-first traversal and set the neighbor values for each node

when all the neighbor values have been set I can check the rendered_at_level for a node's neighbors to find out if
I have to adjust a vertex position to avoid gaps in the terrain and also calculate corner normals by accessing neighbor's neighbors and averaging something together

I don't have to do this right now. I can do other things and return to this later.

improve terrain generation and rendering
 - caves, tunnels, underground structures
   a cave opening deletes one or more triangles from the terrain mesh and links to a cave mesh
   the cave mesh can have multiple openings
 - cache generated terrain to disk/database because the gpu can render a lot faster than we can procedurally generate
   a few million triangles
 - pass more per-vertex variables to the shader such as elevation, wetness, temperature, scorchedness, recently excavatedness
 - give low LOD versions of triangles a billboard facing the player with vegetation, rocks and buildings
 - billboard can be an upside down triangle sticking through the ground but a quad may be better, one more triangle
   but less area to rasterize
 - texture map for the billboard can have different versions of vegetation corresponding to wind strength and
   direction, choose which version in the vertex shader based on wind information attached to the vertex
 - regenerate the mesh when the player moves some distance from the origin of the current mesh
 - voronoi cells for continental plates, 
 - render an atmosphere and some clouds
 - fluid simulation of atmosphere (wind, temperature, moisture, pollution, nuclear fallout) at the same
   resolution as terrain tree, that way we can reuse the terrain tree's neighbor pointers and dynamic LOD
   (probably a lot more data than I want to store on the server for multiplayer, may have to axe it)
 - terrain can store moisture based on a fluid simulation of rivers and lakes and evaporation/melting rate based
   on atmospheric temperature and humidity
   the terrain can be a 2d fluid simulation and each tile has a sponge value that says how much moisture it can
   soak up before the excess pools on the surface and gets carried by gravity and inertia to nearby tiles
   snow and vegetation increase the sponge value. ice, concrete and asphalt decrease it. excessive load can cause an
   avalanche
   belowground can have several types: soil, porous rock, hard rock, resource deposit (metals, coal, oil?)
   fluid simulation belowground at very low flow rate through soil and porous rock, no flow through hard rock
   https://www.youtube.com/watch?v=iKAVRgIrUOU
 - cities, towns, farms
   apartment/office blocks are tall textured boxes
   buildings can be procedurally generated from templates - different styles and materials for walls, roofs and shape
 - roads, railroads, docks and airfields
 - industry
   smelter refines ore (and pretty much any item that has metal in it)
   factory can build anything
   power plants: solar and nuclear

 - cast shadows on the terrain from the sun's point of view
   first check if any celestials are between the sun and the celestial being rendered and ray intersect them if so
   traverse the terrain in sweeps away from the sun toward the terrain tiles that are visible on screen
   the first tile will be lit unless blocked by another celestial
   the next tile will be lit if it's above the shadow ray from the previous tile
   the shadow ray creeps up for every lit tile and stays put for unlit tiles
   for each unlit tile we can store the shadow ray and the tile that caused the shadow so that stuff on the tile can
   easily determine whether it's in shadow or not
 - moving objects can cast shadows separately from this at a higher update rate. sun shadows on static geometry don't
   need to update every frame.
   
 - server spatial partitions
   to scale to thousands of players we have to generate a visibility list for each player: which tiles can they see
   and which units can they see? to accelerate that we can precompute visibility lists for each tile: which other
   tiles can potentially be seen from anywhere on this tile? (ground level and several altitudes)
   also assign a visibility tile to every room in every building and vehicle.

   belowground
   indoor
   outdoor
   canopy
   belowclouds
   abovecoulds
   low orbit
   high orbit

implement gravity and basic collision with terrain


add more cool shit


----


fluid simulation of rainfall and surface water
traverse the terrain tree in multiple passes
fluid on a triangle flows to adjacent triangles based on the fluid level and the lowest point on the shared edge

simulate some erosion based on average rainfall over enough steps to make it look good
initial fluid levels for local fluid simulations are the average fluid levels from the erosion model
then recorded weather history is applied

what blocks me from working on this:
I haven't set the correct neighbor pointers for the terrain tree yet


----

each terrain tile should have a direction, magnitude and type enum to represent footprints, wheel tracks, various road surfaces, railroad, airfield and such. magnitude in case of footprints can represent 1 set of footprints per 10 magnitude, with smaller values representing footprints that have faded due to weather

also a snow depth which adjusts the rendered terrain coordinates upwards and colors the terrain white

----



physics engine: record and replay
every second: snapshot of the physics state
every tick: only the variables that changed



representing the player's UI state
rts, controlling a vehicle, controlling a character


representing players, npcs
"owner" class, can own many units and vehicles
"unit" class: player characters, NPCs, vehicles


representing the world, its resources and objects not owned by anyone in particular



representing the market, contracts, communications, politics, factions, fleets/squads

need a simple way to flag owners as friends or foes of each other for basic combat functionality

I want to implement some guns (fixed angle, turret, point defense) and a homing missile to have at least
some basic combat functionality.


----

Resources

hilly areas are good for mining
flat green areas are good for agriculture
ocean and lakes provide fish
lakes provide freshwater




----

starting equipment:

an AI companion to build buildings, gather resources and explain the game mechanics
a weapon
a vehicle





shadows

we can cast a few shadow rays from the z buffer at a low resolution as a first pass
if 4 points in a square have the same value (shaded or lit) fill in the area between them with the same value
optionally cast an extra ray for points with wildly different z-value than its neighbors
for the remaining points, cast additional rays to find the edge
if the ray to the obscuring object is long relative to the size and position of the light source,
stop at a low resolution and blur the edge. if it's short, trace the edge at a high resolution
finally fill in the areas on both sides of the edge




collisions



